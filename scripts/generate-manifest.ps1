# generate-manifest.ps1
# PowerShell script to generate package.xml manifest
# Created by Amit Bhardwaj - Salesforce Technical Architect

param(
    [Parameter(Mandatory=$true)]
    [string]$OrgAlias,
    [string]$OutputPath = "package.xml",
    [string]$ManifestType = "sample"
)

try {
    # Check if SF CLI is available
    $sfCommand = Get-Command sf -ErrorAction SilentlyContinue
    if (-not $sfCommand) {
        Write-Host "Error: Salesforce CLI not found" -ForegroundColor Red
        exit 1
    }

    if ($ManifestType -eq "sample") {
        # Generate sample manifest with common types
        $manifestContent = @"
<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <!-- Generated by Salesforce Toolkit - Created by Amit Bhardwaj -->
    <!-- https://www.linkedin.com/in/salesforce-technical-architect/ -->
    <!-- Sample manifest with common metadata types -->
    
    <!-- Apex Classes -->
    <types>
        <members>*</members>
        <name>ApexClass</name>
    </types>
    
    <!-- Apex Triggers -->
    <types>
        <members>*</members>
        <name>ApexTrigger</name>
    </types>
    
    <!-- Custom Objects -->
    <types>
        <members>*</members>
        <name>CustomObject</name>
    </types>
    
    <!-- Custom Fields -->
    <types>
        <members>*</members>
        <name>CustomField</name>
    </types>
    
    <!-- Page Layouts -->
    <types>
        <members>*</members>
        <name>Layout</name>
    </types>
    
    <!-- Flows -->
    <types>
        <members>*</members>
        <name>Flow</name>
    </types>
    
    <!-- Lightning Web Components -->
    <types>
        <members>*</members>
        <name>LightningComponentBundle</name>
    </types>
    
    <!-- Permission Sets -->
    <types>
        <members>*</members>
        <name>PermissionSet</name>
    </types>
    
    <!-- Static Resources -->
    <types>
        <members>*</members>
        <name>StaticResource</name>
    </types>
    
    <!-- Custom Labels -->
    <types>
        <members>*</members>
        <name>CustomLabel</name>
    </types>
    
    <!-- API Version -->
    <version>58.0</version>
</Package>
"@
    } else {
        # For actual manifest, we would need to query the org
        # This is a simplified version
        Write-Host "Generating manifest from org metadata..." -ForegroundColor Yellow
        
        # Get org info for API version
        $orgInfo = sf org display --target-org $OrgAlias --json | ConvertFrom-Json
        $apiVersion = $orgInfo.result.apiVersion
        
        $manifestContent = @"
<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <!-- Generated by Salesforce Toolkit - Created by Amit Bhardwaj -->
    <!-- Generated from org: $OrgAlias -->
    <!-- Generated on: $(Get-Date -Format "yyyy-MM-ddTHH:mm:ss") -->
    
    <!-- Common metadata types -->
    <types>
        <members>*</members>
        <name>ApexClass</name>
    </types>
    
    <types>
        <members>*</members>
        <name>ApexTrigger</name>
    </types>
    
    <types>
        <members>*</members>
        <name>CustomObject</name>
    </types>
    
    <types>
        <members>*</members>
        <name>Layout</name>
    </types>
    
    <types>
        <members>*</members>
        <name>Flow</name>
    </types>
    
    <!-- API Version -->
    <version>$apiVersion</version>
</Package>
"@
    }

    # Save the manifest
    $manifestContent | Out-File -FilePath $OutputPath -Encoding UTF8
    
    Write-Host "âœ… Manifest file generated successfully: $OutputPath" -ForegroundColor Green
    Write-Host "   Type: $ManifestType"
    Write-Host "   Org: $OrgAlias"
    
} catch {
    Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}