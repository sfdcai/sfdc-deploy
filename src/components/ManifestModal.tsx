import React, { useState } from 'react';
import { Modal } from './Modal';
import { Download, FileText, Loader2, FolderOpen } from 'lucide-react';
import { useToast } from '../hooks/useToast';

interface ManifestModalProps {
  orgs: any[];
  onClose: () => void;
  projectDirectory: string;
}

export const ManifestModal: React.FC<ManifestModalProps> = ({ orgs, onClose, projectDirectory }) => {
  const [selectedOrg, setSelectedOrg] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const generateManifest = async () => {
    if (!selectedOrg) {
      toast({
        title: 'Error',
        description: 'Please select an organization first',
        variant: 'destructive'
      });
      return;
    }

    setLoading(true);
    try {
      // Generate a comprehensive package.xml manifest
      const manifestContent = `<?xml version="1.0" encoding="UTF-8"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <!-- Generated by Salesforce Toolkit - Created by Amit Bhardwaj -->
    <!-- https://www.linkedin.com/in/salesforce-technical-architect/ -->
    
    <!-- Apex Classes -->
    <types>
        <members>*</members>
        <name>ApexClass</name>
    </types>
    
    <!-- Apex Triggers -->
    <types>
        <members>*</members>
        <name>ApexTrigger</name>
    </types>
    
    <!-- Custom Objects -->
    <types>
        <members>*</members>
        <name>CustomObject</name>
    </types>
    
    <!-- Custom Fields -->
    <types>
        <members>*</members>
        <name>CustomField</name>
    </types>
    
    <!-- Page Layouts -->
    <types>
        <members>*</members>
        <name>Layout</name>
    </types>
    
    <!-- Flows -->
    <types>
        <members>*</members>
        <name>Flow</name>
    </types>
    
    <!-- Validation Rules -->
    <types>
        <members>*</members>
        <name>ValidationRule</name>
    </types>
    
    <!-- Custom Tabs -->
    <types>
        <members>*</members>
        <name>CustomTab</name>
    </types>
    
    <!-- Custom Applications -->
    <types>
        <members>*</members>
        <name>CustomApplication</name>
    </types>
    
    <!-- Permission Sets -->
    <types>
        <members>*</members>
        <name>PermissionSet</name>
    </types>
    
    <!-- Profiles -->
    <types>
        <members>*</members>
        <name>Profile</name>
    </types>
    
    <!-- Lightning Components -->
    <types>
        <members>*</members>
        <name>LightningComponentBundle</name>
    </types>
    
    <!-- Aura Components -->
    <types>
        <members>*</members>
        <name>AuraDefinitionBundle</name>
    </types>
    
    <!-- Static Resources -->
    <types>
        <members>*</members>
        <name>StaticResource</name>
    </types>
    
    <!-- Email Templates -->
    <types>
        <members>*</members>
        <name>EmailTemplate</name>
    </types>
    
    <!-- Reports -->
    <types>
        <members>*</members>
        <name>Report</name>
    </types>
    
    <!-- Dashboards -->
    <types>
        <members>*</members>
        <name>Dashboard</name>
    </types>
    
    <!-- Custom Labels -->
    <types>
        <members>*</members>
        <name>CustomLabel</name>
    </types>
    
    <!-- Workflow Rules -->
    <types>
        <members>*</members>
        <name>WorkflowRule</name>
    </types>
    
    <!-- Process Builder -->
    <types>
        <members>*</members>
        <name>WorkflowProcess</name>
    </types>
    
    <!-- Custom Settings -->
    <types>
        <members>*</members>
        <name>CustomSetting</name>
    </types>
    
    <!-- Remote Site Settings -->
    <types>
        <members>*</members>
        <name>RemoteSiteSetting</name>
    </types>
    
    <!-- Connected Apps -->
    <types>
        <members>*</members>
        <name>ConnectedApp</name>
    </types>
    
    <!-- API Version -->
    <version>58.0</version>
</Package>`;

      const defaultFilename = projectDirectory 
        ? `${projectDirectory}/package.xml`
        : 'package.xml';

      const filePath = await window.electronAPI.saveFile(manifestContent, defaultFilename);
      
      if (filePath) {
        toast({
          title: 'Success',
          description: `Package.xml manifest generated successfully at ${filePath}`,
          variant: 'default'
        });
      }
    } catch (error) {
      console.error('Failed to generate manifest:', error);
      toast({
        title: 'Error',
        description: 'Failed to generate manifest file',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal isOpen={true} onClose={onClose} title="Generate Manifest" size="md">
      <div className="p-6">
        <div className="mb-6">
          <label className="block text-sm font-medium text-slate-700 mb-2">
            Source Organization
          </label>
          <select
            value={selectedOrg}
            onChange={(e) => setSelectedOrg(e.target.value)}
            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Choose an organization...</option>
            {orgs.map((org) => (
              <option key={org.alias} value={org.alias}>
                {org.alias} ({org.username})
              </option>
            ))}
          </select>
        </div>

        {projectDirectory && (
          <div className="mb-6 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center gap-2">
              <FolderOpen className="w-4 h-4 text-blue-500" />
              <span className="text-sm text-blue-700">
                Will save to: {projectDirectory}
              </span>
            </div>
          </div>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div className="flex items-start gap-3">
            <FileText className="w-5 h-5 text-blue-500 mt-0.5" />
            <div>
              <h4 className="font-medium text-blue-900 mb-1">About Package.xml</h4>
              <p className="text-sm text-blue-700 mb-2">
                The package.xml file defines which metadata components to retrieve from your org. 
                This tool generates a comprehensive manifest including common metadata types.
              </p>
              <p className="text-xs text-blue-600">
                Created by Amit Bhardwaj - Salesforce Technical Architect
              </p>
            </div>
          </div>
        </div>

        <button
          onClick={generateManifest}
          disabled={loading || !selectedOrg}
          className="w-full bg-green-500 hover:bg-green-600 disabled:bg-slate-300 disabled:cursor-not-allowed text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2"
        >
          {loading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Download className="w-5 h-5" />
              Generate & Download
            </>
          )}
        </button>
      </div>
    </Modal>
  );
};